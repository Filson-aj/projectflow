generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  coordinator User?        @relation("DepartmentCoordinator")
  supervisors User[]       @relation("DepartmentSupervisors")
  students    User[]       @relation("DepartmentStudents")
  projects    Project[]
  allocations Allocation[]

  @@map("departments")
}

model Session {
  id        String   @id @default(cuid())
  name      String   @unique
  startDate DateTime
  endDate   DateTime
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  projects    Project[]
  allocations Allocation[]

  @@map("sessions")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  password       String
  firstName      String
  lastName       String
  phone          String?
  role           UserRole
  isFirstLogin   Boolean  @default(true)
  areaOfResearch String?
  maxStudents    Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Session relationship
  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?

  // Department relationships
  coordinatedDepartment   Department? @relation("DepartmentCoordinator", fields: [coordinatedDepartmentId], references: [id])
  coordinatedDepartmentId String?     @unique

  supervisorDepartment   Department? @relation("DepartmentSupervisors", fields: [supervisorDepartmentId], references: [id])
  supervisorDepartmentId String?

  studentDepartment   Department? @relation("DepartmentStudents", fields: [studentDepartmentId], references: [id])
  studentDepartmentId String?

  // Project relationships
  supervisedProjects Project[] @relation("ProjectSupervisor")
  studentProjects    Project[] @relation("ProjectStudent")

  // Submissions
  submissions Submission[]

  // Allocations
  supervisorAllocations Allocation[] @relation("AllocationSupervisor")
  studentAllocations    Allocation[] @relation("AllocationStudent")

  @@map("users")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String
  status      ProjectStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  session   Session? @relation(fields: [sessionId], references: [id])
  sessionId String?

  supervisor   User?   @relation("ProjectSupervisor", fields: [supervisorId], references: [id])
  supervisorId String?

  student   User?   @relation("ProjectStudent", fields: [studentId], references: [id])
  studentId String?

  submissions Submission[]

  @@map("projects")
}

model Submission {
  id          String           @id @default(cuid())
  title       String
  description String?
  fileName    String
  filePath    String
  fileType    String
  status      SubmissionStatus @default(PENDING)
  feedback    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  student   User   @relation(fields: [studentId], references: [id])
  studentId String

  @@map("submissions")
}

model Allocation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  supervisor   User   @relation("AllocationSupervisor", fields: [supervisorId], references: [id])
  supervisorId String

  student   User   @relation("AllocationStudent", fields: [studentId], references: [id])
  studentId String

  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  @@unique([sessionId, supervisorId, studentId])
  @@map("allocations")
}

enum UserRole {
  ADMIN
  COORDINATOR
  SUPERVISOR
  STUDENT
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}
